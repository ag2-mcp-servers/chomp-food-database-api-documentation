# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:53:32+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class CountryDetails(BaseModel):
    english_speaking: Optional[int] = Field(
        None,
        description="The number of countries where English is the country's primary language",
    )
    non_english_speaking: Optional[int] = Field(
        None,
        description="The number of countries where English is not the country's primary language",
    )


class DietFlag(BaseModel):
    compatibility_description: Optional[str] = Field(
        None,
        description='A description of how we graded this ingredient for compatibility with the diet',
    )
    compatibility_level: Optional[int] = Field(
        None,
        description='A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility',
    )
    diet_label: Optional[str] = Field(
        None,
        description='Name of the diet with which this ingredient may not be compatible',
    )
    ingredient: Optional[str] = Field(None, description='Ingredient name')
    ingredient_description: Optional[str] = Field(
        None, description='Description of the ingredient'
    )
    is_allergen: Optional[bool] = Field(
        None, description='Boolean representing if the ingredient is a known allergen'
    )
    is_compatible: Optional[str] = Field(
        None,
        description='A description of if we believe this ingredient is compatible with the diet',
    )


class GlutenFree(BaseModel):
    compatibility_level: Optional[int] = Field(
        None,
        description='Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility',
    )
    confidence: Optional[int] = Field(
        None,
        description='Boolean that indicates if we are confident in how this item is graded for this diet',
    )
    confidence_description: Optional[str] = Field(
        None,
        description='Description of our confidence that this item was graded correctly',
    )
    is_compatible: Optional[bool] = Field(
        None, description='Boolean describing if this item is compatible with this diet'
    )
    name: Optional[str] = Field(None, description='Diet name')


class Vegan(BaseModel):
    compatibility_level: Optional[int] = Field(
        None,
        description='Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility',
    )
    confidence: Optional[int] = Field(
        None,
        description='Boolean that indicates if we are confident in how this item is graded for this diet',
    )
    confidence_description: Optional[str] = Field(
        None,
        description='Description of our confidence that this item was graded correctly',
    )
    is_compatible: Optional[bool] = Field(
        None, description='Boolean describing if this item is compatible with this diet'
    )
    name: Optional[str] = Field(None, description='Diet name')


class Vegetarian(BaseModel):
    compatibility_level: Optional[int] = Field(
        None,
        description='Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility',
    )
    confidence: Optional[int] = Field(
        None,
        description='Boolean that indicates if we are confident in how this item is graded for this diet',
    )
    confidence_description: Optional[str] = Field(
        None,
        description='Description of our confidence that this item was graded correctly',
    )
    is_compatible: Optional[bool] = Field(
        None, description='Boolean describing if this item is compatible with this diet'
    )
    name: Optional[str] = Field(None, description='Diet name')


class DietLabels(BaseModel):
    gluten_free: Optional[GlutenFree] = Field(
        None,
        description="An object containing information on this item's compatibility with Gluten Free diets",
    )
    vegan: Optional[Vegan] = Field(
        None,
        description="An object containing information on this item's compatibility with the Vegan diets",
    )
    vegetarian: Optional[Vegetarian] = Field(
        None,
        description="An object containing information on this item's compatibility with Vegetarian diets",
    )


class Nutrient(BaseModel):
    data_points: Optional[int] = Field(
        None, description='Number of observations on which the value is based'
    )
    description: Optional[str] = Field(
        None, description='Description of the nutrient source'
    )
    measurement_unit: Optional[str] = Field(
        None, description='The unit used for the measure of this nutrient'
    )
    name: Optional[str] = Field(None, description='Nutrient name')
    per_100g: Optional[float] = Field(
        None, description='Amount of the nutrient per 100g of food'
    )
    rank: Optional[int] = Field(None, description='Nutrient rank')


class Package(BaseModel):
    quantity: Optional[int] = Field(None, description='Package quantity')
    size: Optional[str] = Field(None, description='Package size')


class Front(BaseModel):
    display: Optional[str] = Field(
        None, description="Full-sized photo of the front of this item's packaging"
    )
    small: Optional[str] = Field(
        None, description="Small photo of the front of this item's packaging"
    )
    thumb: Optional[str] = Field(
        None, description="Thumbnail photo of the front of this item's packaging"
    )


class Ingredients(BaseModel):
    display: Optional[str] = Field(
        None, description="Full-sized photo of the ingredients on this item's packaging"
    )
    small: Optional[str] = Field(
        None, description="Small photo of the ingredients on this item's packaging"
    )
    thumb: Optional[str] = Field(
        None, description="Thumbnail photo of the ingredients on this item's packaging"
    )


class Nutrition(BaseModel):
    display: Optional[str] = Field(
        None, description="Full-sized photo of this item's nutrition label"
    )
    small: Optional[str] = Field(
        None, description="Small photo of this item's nutrition label"
    )
    thumb: Optional[str] = Field(
        None, description="Thumbnail photo of this item's nutrition label"
    )


class PackagingPhotos(BaseModel):
    front: Optional[Front] = Field(
        None,
        description="An object containing photos of the front of this item's packaging",
    )
    ingredients: Optional[Ingredients] = Field(
        None,
        description="An object containing photos of the ingredients on this item's packaging",
    )
    nutrition: Optional[Nutrition] = Field(
        None, description="An object containing photos of this item's nutrition label"
    )


class Serving(BaseModel):
    measurement_unit: Optional[str] = Field(
        None,
        description='Measurement unit for each serving (e.g. if measure is 3 tsp, the unit is tsp)',
    )
    size: Optional[str] = Field(None, description='Serving size')
    size_fulltext: Optional[str] = Field(None, description='Serving size description')


class Item(BaseModel):
    allergens: Optional[List[str]] = Field(
        None,
        description='An array of ingredients in this item that may cause allergic reactions in people',
    )
    barcode: Optional[str] = Field(None, description='EAN/UPC barcode')
    brand: Optional[str] = Field(None, description='The brand name that owns this item')
    brand_list: Optional[List[str]] = Field(
        None,
        description='An array of brands we have associated with this item. Some items are sold by more than 1 brand.',
    )
    categories: Optional[List[str]] = None
    countries: Optional[List[str]] = Field(
        None, description='An array of countries where this item is sold'
    )
    country_details: Optional[CountryDetails] = Field(
        None,
        description='An object containing additional information on the countries where this item is found',
    )
    description: Optional[str] = Field(None, description='A description of this item')
    diet_flags: Optional[List[DietFlag]] = Field(
        None,
        description='An array of ingredient objects that were flagged while grading this item for compatibility with each diet',
    )
    diet_labels: Optional[DietLabels] = Field(
        None,
        description="An object containing this item's compatibility grades for each supported diet",
    )
    has_english_ingredients: Optional[bool] = Field(
        None,
        description='A boolean indicating if we have English ingredients for this item',
    )
    ingredient_list: Optional[List[str]] = Field(
        None, description="An array of this item's ingredients"
    )
    ingredients: Optional[str] = Field(
        None, description="This food item's ingredients from greatest quantity to least"
    )
    keywords: Optional[List[str]] = Field(
        None, description='An array of keywords that can be used to describe this item'
    )
    minerals: Optional[List[str]] = Field(
        None, description='An array of minerals that this item contains'
    )
    name: Optional[str] = Field(
        None,
        description='Item name as provided by brand owner or as shown on packaging',
    )
    nutrients: Optional[List[Nutrient]] = Field(
        None,
        description='An array containing nutrient informatio objects for this food item',
    )
    package: Optional[Package] = Field(
        None,
        description='An object containing basic packaging information about this item',
    )
    packaging_photos: Optional[PackagingPhotos] = Field(
        None,
        description="A object containing a collection of photos of this item's packaging",
    )
    palm_oil_ingredients: Optional[List[str]] = Field(
        None, description='An array of ingredients made from palm oil'
    )
    serving: Optional[Serving] = Field(
        None, description='An object containing serving information for this item'
    )
    traces: Optional[List[str]] = Field(
        None, description='An array of trace ingredients that may be found in this item'
    )
    vitamins: Optional[List[str]] = Field(
        None, description='An array of vitamins that are found in this item'
    )


class BrandedFoodObject(BaseModel):
    items: Optional[List[Item]] = Field(
        None,
        description='An array containing an object for each individual item returned by your API call.',
    )


class CalorieConversionFactor(BaseModel):
    carbohydrate_value: Optional[float] = Field(
        None, description='The multiplication factor for carbohydrates'
    )
    fat_value: Optional[float] = Field(
        None, description='The multiplication factor for fat'
    )
    protein_value: Optional[float] = Field(
        None, description='The multiplication factor for protein'
    )


class Component(BaseModel):
    data_points: Optional[int] = Field(
        None, description='The number of obersvations on which the measure is based'
    )
    gram_weight: Optional[float] = Field(
        None, description='The weight of the component in grams'
    )
    is_refuse: Optional[bool] = Field(
        None, description='Whether the component is refuse, i.e. not edible'
    )
    name: Optional[str] = Field(None, description='The kind of component, e.g. bone')
    pct_weight: Optional[float] = Field(
        None,
        description='The weight of the component as a percentage of the total weight of the food',
    )


class Nutrient1(BaseModel):
    data_points: Optional[int] = Field(
        None, description='Number of observations on which the value is based'
    )
    description: Optional[str] = Field(
        None, description='Description of the nutrient source'
    )
    footnote: Optional[str] = Field(
        None,
        description='Comments on any unusual aspect of the food nutrient. Examples might include why a nutrient value is different than typically expected.',
    )
    max: Optional[float] = Field(None, description='Maximum nutrient value')
    measurement_unit: Optional[str] = Field(
        None, description='The unit used for the measure of this nutrient'
    )
    median: Optional[float] = Field(None, description='Median nutrient value')
    min: Optional[float] = Field(None, description='Minimum nutrient value')
    name: Optional[str] = Field(None, description='Nutrient name')
    per_100g: Optional[float] = Field(
        None, description='Amount of the nutrient per 100g of food'
    )
    rank: Optional[int] = Field(None, description='Nutrient rank')


class Portion(BaseModel):
    data_points: Optional[int] = Field(
        None, description='The number of observations on which the measure is based'
    )
    description: Optional[str] = Field(
        None,
        description='Comments that provide more specificity on the measure. For example, for a pizza measure the dissemination text might be 1 slice is 1/8th of a 14 inch pizza.',
    )
    footnote: Optional[str] = Field(
        None,
        description='Comments on any unusual aspects of the measure. Examples might includes caveats on the usage of a measure, or reasons why a measure gram weight is an unexpected value.',
    )
    gram_weight: Optional[float] = Field(
        None, description='The weight of the measure in grams'
    )
    measurement_unit: Optional[str] = Field(
        None,
        description='The unit used for measure (e.g. if mesure is 3 tsp, the unit is tsp)',
    )
    modifier: Optional[str] = Field(
        None,
        description='Qualifier of the measure (e.g. related to food shape or form) (e.g. melted, crushed, diced)',
    )


class Item1(BaseModel):
    calorie_conversion_factor: Optional[CalorieConversionFactor] = Field(
        None,
        description='An object containing the multiplication factors to be used when calculating energy from macronutrients for a specific food.',
    )
    categories: Optional[List[str]] = None
    common_name: Optional[str] = Field(
        None,
        description='Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is "BRAND\'s Spicy Enchilada" the common name may be "Chicken enchilada")',
    )
    components: Optional[List[Component]] = Field(
        None,
        description='An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)',
    )
    footnote: Optional[str] = Field(
        None,
        description='Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall',
    )
    name: Optional[str] = Field(
        None,
        description='Item name as provided by brand owner or as shown on packaging',
    )
    nutrients: Optional[List[Nutrient1]] = Field(
        None,
        description='An array containing nutrient informatio objects for this food item',
    )
    portions: Optional[List[Portion]] = Field(
        None,
        description='An array of objects containing information on discrete amounts of a food found in this item',
    )
    protein_conversion_factor: Optional[float] = Field(
        None,
        description='The multiplication factor used to calculate protein from nitrogen',
    )
    score: Optional[str] = Field(
        None,
        description="A value that represents how similar the name of this food item is to the original search term. The lower the value the closer this item's name is to the original search term.",
    )
    search_term: Optional[str] = Field(
        None, description='The original search term that found this food item'
    )


class IngredientObject(BaseModel):
    items: Optional[List[Item1]] = Field(
        None,
        description='An array containing an object for each individual item returned by your API call.',
    )


class Limit(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10


class Diet(Enum):
    Vegan = 'Vegan'
    Vegetarian = 'Vegetarian'
    Gluten_Free = 'Gluten Free'


class Limit4(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
